[startup]
init-timeout = 30


[brain]
sleep-time = 23:00
wakeup-time = 07:00
require-synced-time = yes


[trigger:kalliope-runlevel]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/kalliope/runlevel"
mqtt-payload-regex = "(?P<runlevel>\w+)"
signal-json-formatter = '["kalliope", {"runlevel": "%(runlevel)s"}]'
sleepless = true

[trigger:kalliope-status]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/kalliope/status"
mqtt-payload-regex = "(?P<status>\w+)"
signal-json-formatter = '["kalliope", {"status": "%(status)s"}]'
sleepless = true

[trigger:frontend-runlevel]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/runlevel"
mqtt-payload-regex = "(?P<runlevel>\w+)"
signal-json-formatter = '["frontend", {"runlevel": "%(runlevel)s"}]'
sleepless = true

[trigger:frontend-status]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/status"
mqtt-payload-regex = "(?P<status>\w+)"
signal-json-formatter = '["frontend", {"status": "%(status)s"}]'
sleepless = true

[trigger:frontend-gui-screen]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/gui/screen"
mqtt-payload-jsonpath = '$[?(screen)].screen'
signal-json-formatter = '["frontend", {"gui": {"screen": {"name": "%(jsonpath)s", "parameter": {}, "origin": "frontend"}}}]'

[trigger:frontend-gui-overlay]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/gui/overlay"
mqtt-payload-jsonpath = '$[?(overlay)].overlay'
signal-json-formatter = '["frontend", {"gui": {"overlay": {"name": "%(jsonpath)s", "parameter": {}, "origin": "frontend"}}}]'

[trigger:frontend-application-error]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/application/error"
mqtt-payload-jsonpath = '$[?(error)].error'
signal-json-formatter = '["frontend", {"application": {"error": %(jsonpath)s, "origin": "frontend"}}]'

[trigger:enclosure-control-rotary]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/device/input"
mqtt-payload-jsonpath = '$[?(source.type=="rotary" & source.name=="control")].event.delta'
signal-json-formatter = '["enclosure", {"control": {"delta": "%(jsonpath)s"}}]'

[trigger:enclosure-control-button]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/device/input"
mqtt-payload-jsonpath = '$[?(source.type=="button" & source.name=="control")].event.status'
signal-json-formatter = '["enclosure", {"control": {"select": "%(jsonpath)s"}}]'

[trigger:enclosure-volume-rotary]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/device/input"
mqtt-payload-jsonpath = '$[?(source.type=="rotary" & source.name=="volume")].event.delta'
signal-json-formatter = '["enclosure", {"volume": {"delta": "%(jsonpath)s"}}]'

[trigger:enclosure-volume-button]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/event/frontend/device/input"
mqtt-payload-jsonpath = '$[?(source.type=="button" & source.name=="volume")].event.status'
signal-json-formatter = '["enclosure", {"volume": {"mute": "%(jsonpath)s"}}]'

[trigger:brain-script]
plugin = hal9000.brain.plugins.mqtt
mqtt-topic = "hal9000/command/brain/script"
mqtt-payload-jsonpath = '$[?(script)].script.id'
signal-json-formatter = '["script", {"id": "%(jsonpath)s"}]'


[action:kalliope]
plugin = hal9000.brain.plugins.kalliope
kalliope-trigger-mqtt-topic = kalliope/trigger/multiplexer/event

[action:frontend]
plugin = hal9000.brain.plugins.frontend

[action:enclosure]
plugin = hal9000.brain.plugins.enclosure

[action:mqtt]
plugin = hal9000.brain.plugins.mqtt

[action:script]
plugin = hal9000.brain.plugins.script
reboot = ./scripts/reboot.py
poweroff = ./scripts/poweroff.py


[enclosure:components]
control = hal9000.brain.plugins.enclosure.control.Control
volume = hal9000.brain.plugins.enclosure.volume.Volume

[enclosure:control]
item-files = brain.d/control/menu/main.ini
menu-files = brain.d/control/menu/en/main.ini

[enclosure:volume]
initial-volume = 50
initial-mute = False
volume-step = 5


[help]
error-url = "https://github.com/juergenpabel/HAL9000-demo-en_US/wiki/ERROR_{error_id}"
splash-url = "https://github.com/juergenpabel/HAL9000-demo-en_US/wiki/SPLASH_{splash_id}"


[mqtt]
server = 127.0.0.1
port = 1883


[loggers]
keys = root

[handlers]
keys=stdout

[formatters]
keys=stdout

[logger_root]
level=INFO
handlers=stdout

[handler_stdout]
class=StreamHandler
formatter=stdout
args=(sys.stdout,)

[formatter_stdout]
format=%(asctime)s - %(levelname)-8s - %(message)s
datefmt=

