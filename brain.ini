[brain]
sleep-time = 22:00
wakeup-time = 06:00


[synapses]
control-rotary = enclosure
control-button = enclosure
volume-rotary = enclosure
volume-button = enclosure
rfid = enclosure
motion = enclosure
kalliope-state = kalliope
frontend-state = frontend
frontend-error = frontend
frontend-gui = frontend


[enclosure:components]
control = hal9000.plugins.brain.enclosure.control.Control
volume = hal9000.plugins.brain.enclosure.volume.Volume
motion = hal9000.plugins.brain.enclosure.motion.Motion
rfid = hal9000.plugins.brain.enclosure.rfid.RFID

[enclosure:control]
item-files = brain.d/control/menu/main.ini
menu-files = brain.d/control/menu/en/main.ini

[enclosure:volume]
initial-volume = 10
initial-mute = False
volume-step = 5


[trigger:control-rotary]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/rotary/control"
mqtt-payload-regex = "rotary:control delta=(?P<control>[+-]\d+)"
neuron-json-formatter = '{"control": {"delta": "%(control)s"}}'

[trigger:control-button]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/button/control"
mqtt-payload-regex = "button:control status=(?P<select>\w+)"
neuron-json-formatter = '{"control": {"select": "%(select)s"}}'

[trigger:volume-rotary]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/rotary/volume"
mqtt-payload-regex = "rotary:volume delta=(?P<volume>[+-]?\d+)"
neuron-json-formatter = '{"volume": {"delta": "%(volume)s"}}'

[trigger:volume-button]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/button/volume"
mqtt-payload-regex = "button:volume status=(?P<mute>\w+)"
neuron-json-formatter = '{"volume": {"mute": "%(mute)s"}}'

[trigger:rfid]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/rfid/tag"
mqtt-payload-regex = "rfid:tag (?P<event>\w+)=(?P<uid>\w{8})"
neuron-json-formatter = '{"rfid": {"event": "%(event)s","uid": "%(uid)s"}}'

[trigger:frontend-state]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/interface/state"
mqtt-payload-regex = "(?P<state>\w+)"
neuron-json-formatter = '{"frontend": {"state": "%(state)s"}}'

[trigger:frontend-gui]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/gui/screen"
mqtt-payload-regex = "(?P<screen>.+)"
neuron-json-formatter = '{"frontend": {"gui": %(screen)s}}'

[trigger:frontend-error]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/frontend/application/error"
mqtt-payload-regex = "(?P<error>.+)"
neuron-json-formatter = '{"frontend": %(error)s}'

[trigger:kalliope-state]
module = hal9000.plugins.brain.mqtt
mqtt-topic = "hal9000/event/kalliope/interface/state"
mqtt-payload-regex = "(?P<state>\w+)"
neuron-json-formatter = '{"kalliope": {"state": "%(state)s"}}'


[action:enclosure]
module = hal9000.plugins.brain.enclosure

[action:frontend]
module = hal9000.plugins.brain.frontend

[action:kalliope]
module = hal9000.plugins.brain.kalliope
kalliope-trigger-mqtt-topic = kalliope/trigger/multiplexer/event

[action:mqtt]
module = hal9000.plugins.brain.mqtt


[command:reboot]
exec = ./commands/reboot.py

[command:poweroff]
exec = ./commands/poweroff.py


[runlevel]
boot-started-action-name = brain
boot-started-signal-data = {"status": {}}
boot-timeout = 15
boot-finished-action-name = mqtt
boot-finished-signal-data = {"mqtt": [{"topic": "hal9000/event/brain/ready", "payload": ""}, {"topic": "hal9000/command/frontend/gui/screen", "payload": "{\"hal9000\": {\"queue\": \"replace\", \"sequence\": {\"name\": \"wakeup\", \"loop\": \"false\"}}}"}, {"topic": "hal9000/command/frontend/gui/screen", "payload": "{\"hal9000\": {\"queue\": \"append\", \"sequence\": {\"name\": \"active\", \"loop\": \"false\"}}}"}, {"topic": "hal9000/command/frontend/gui/screen", "payload": "{\"hal9000\": {\"queue\": \"append\", \"sequence\": {\"name\": \"active\", \"loop\": \"false\"}}}"}, {"topic": "hal9000/command/frontend/gui/screen", "payload": "{\"hal9000\": {\"queue\": \"append\", \"sequence\": {\"name\": \"sleep\", \"loop\": \"false\"}}}"}]}


[mqtt]
server = 127.0.0.1
port = 1883

[help]
#translation-file = ...

[python]
module-paths = "../../package", "./package"
daemon-module = hal9000.brain.daemon

[loggers]
keys = root, brain

[handlers]
keys=stdout

[formatters]
keys=stdout

[logger_root]
level=DEBUG
handlers=stdout

[logger_brain]
level=DEBUG
handlers=stdout
qualname=brain
propagate=0

[handler_stdout]
class=StreamHandler
formatter=stdout
args=(sys.stdout,)

[formatter_stdout]
format=%(asctime)s - %(levelname)-8s - %(threadName)-10s - %(name)-10s - %(message)s
datefmt=

